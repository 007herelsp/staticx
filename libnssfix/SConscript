Import('env')

env.Tool('stubgen')

# Build a stub libc to avoid symbol versioning information
libc_stub = env.ShlibStubGen(
    target = 'libc.so.6',
    symbols = [
        '__assert_fail',
        '_exit',
        'environ',
        'fprintf',
        'free',
        'getenv',
        'getpid',
        'malloc',
        'mempcpy',
        '__nss_configure_lookup',
        'stderr',
        'strchr',
        'strdup',
        'strlen',
        'unsetenv',
    ],
)

libnssfix = env.SharedLibrary(
    target = 'nssfix',
    source = [
        'nssfix.c',
    ],
    CPPFLAGS = env.get('CPPFLAGS', []) + [
        # Ubuntu sets -D_FORTIFY_SOURCE=2 by default:
        # https://wiki.ubuntu.com/ToolChain/CompilerFlags
        # This turns fprintf() into __fprintf_chk() which could hurt our libc
        # compatibility, so we turn it off. Those docs say we should be able
        # to define it to 0, but GCC doesn't like it:
        # <command-line>:0:0: error: "_FORTIFY_SOURCE" redefined
        '-U_FORTIFY_SOURCE',
    ],
    LINKFLAGS = env['LINKFLAGS'] + [
        '-nostdlib',            # Force use of stub
        '-Wl,--no-undefined',   # Detect missing symbols in stub

        # Ubuntu sets -Wl,--as-needed by default.
        # But we want to force linkage of libnss*
        '-Wl,--no-as-needed',
    ],
    LIBS = [
        libc_stub,
        'dl',   # TODO: Stub

        # These aren't needed for the library itself, but for
        # staticx.hooks.glibc to discover their paths.
        'nss_files',
        'nss_dns',
    ],
)

Return('libnssfix')
